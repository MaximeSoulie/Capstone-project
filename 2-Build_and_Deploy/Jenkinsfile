pipeline {
     agent any
     stages {
         stage('Build') {
             steps {
                 sh 'echo "Hello World"'
                 sh '''
                     echo "Multiline shell steps works too"
                     ls -lah
                 '''
             }
         }
         stage('Lint HTML') {
              steps {
                  sh 'tidy -q -e *.html'
              }
         }
             stage('test1') {
      steps {
        echo 'Hello World'
        snsPublish(topicArn: 'arn:aws:sns:us-west-2:086340503613:jenkinspratice', subject: 'PraticebuildOK', message: 'build is ok')
      }
      stage('Security Scan') {
              steps { 
                 aquaMicroscanner imageName: 'msoulie/capstone-project:latest', notCompliesCmd: 'exit 1', onDisallowed: 'fail', outputFormat: 'html'
              }
         }       
         stage('Upload to Docker') {
             steps {
               
               }
             }
         }
def userInput = true
def didTimeout = false
try {
    timeout(time: 60, unit: 'SECONDS') { // change to a convenient timeout for you
        userInput = input(
        id: 'Proceed1', message: 'Was this successful?', parameters: [
        [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']
        ])
    }
} catch(err) { // timeout reached or input false
    def user = err.getCauses()[0].getUser()
    if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
        didTimeout = true
    } else {
        userInput = false
        echo "Aborted by: [${user}]"
    }
}

node {
    if (didTimeout) {
        // do something on timeout
        echo "no input was received before timeout"
    } else if (userInput == true) {
        kubectl apply -f capstone-project-app.yml
        echo "this was successful"
    } else {
        kubectl rollout undo deployment capstone-project
        echo "this was not successful"
        currentBuild.result = 'FAILURE'
    } 
}

     }
}
