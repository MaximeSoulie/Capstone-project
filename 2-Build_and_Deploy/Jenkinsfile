pipeline {
     agent any
     stages {
stage ("lint dockerfile") {
    agent {
        docker {
            image 'hadolint/hadolint:latest-debian'
        }
    }
    steps {
        sh '''   hadolint 2-Build_and_Deploy/Dockerfile > $(pwd)/hadolint_lint.txt 
        [[ -s "$(pwd)/hadolint_lint.txt" ]] && echo "Filesize not zero" && exit 1 || echo "Filesize zero"
        '''
    }
    post {
        always {
            archiveArtifacts 'hadolint_lint.txt'
        }
    }
}
 stage('Build docker image') {
            steps {
                script {
                    image = docker.build("msoulie/capstone-project", "-f ./2-Build_and_Deploy/Dockerfile ./2-Build_and_Deploy/")
                }
            }
        }
      stage('Security Scan') {
              steps { 
                  script {
                 secscan = aquaMicroscanner imageName: "msoulie/capstone-project", notCompliesCmd: "exit 1", onDisallowed: "pass", outputFormat: "html"
                }
              }
         }       
     stage('Push Image To Dockerhub') {
            steps {
              script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-cr') {
                        image.push("${env.BUILD_ID}")
                        image.push("latest")
                    }
                }
        }
     }
     stage('Clean up Docker local images') {
            steps {
                script {
                    sh 'docker image prune -a -f --filter "label!=keep"'
                }
            }
        }
     stage('Set kubeconfig then apply deployment - rolling update') {
            steps {
                script {
                    withAWS(credentials: 'aws-capstone', region: 'us-west-2') {
                    sh 'aws eks --region us-west-2 update-kubeconfig --name capstonecluster'
                    sh 'kubectl apply -f ./2-Build_and_Deploy/mycapstoneapp.yaml'
                    }
                }
            }
        }
         stage('Deployment complete') {
             steps {
                 sh 'ELB=$(kubectl get service mycapstoneapp-service -n mlapp4ms -o json | jq -r ".status.loadBalancer.ingress[].hostname") ; echo "deployment endpoint: $ELB"'
             }
         }

     }
 }
