pipeline {
     agent any
     stages {
         stage('Message') {
             steps {
                 sh 'echo "Starting build to EKS"'
             }
         }
stage ("lint dockerfile") {
    agent {
        docker {
            image 'hadolint/hadolint:latest-debian'
        }
    }
    steps {
        sh 'hadolint 2-Build_and_Deploy/Dockerfile | tee -a hadolint_lint.txt'
        sh 'if [[ -s hadolint_lint.txt ]]; then echo "file contains output" && exit 1; else echo "hadolint_lint.txt is empty"; fi'
    }
    post {
        always {
            archiveArtifacts 'hadolint_lint.txt'
        }
    }
}
 stage('Build docker image') {
            steps {
                script {
                    image = docker.build("msoulie/capstone-project", "-f ./2-Build_and_Deploy/Dockerfile ./2-Build_and_Deploy/")
                }
            }
        }
      stage('Security Scan') {
              steps { 
                  script {
                 secscan = aquaMicroscanner imageName: "msoulie/capstone-project", notCompliesCmd: "exit 1", onDisallowed: "pass", outputFormat: "html"
                }
              }
         }       
     stage('Push Image To Dockerhub') {
            steps {
              script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-cr') {
                        image.push("${env.BUILD_ID}")
                        image.push("latest")
                    }
                }
        }
     }
     stage('Clean up Docker local images') {
            steps {
                script {
                    sh 'docker system prune -f'
                }
            }
        }


     }
 }